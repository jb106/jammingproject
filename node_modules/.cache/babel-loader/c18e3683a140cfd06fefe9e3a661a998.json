{"ast":null,"code":"import _classCallCheck from \"/Users/jbl/Desktop/jamming-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jbl/Desktop/jamming-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jbl/Desktop/jamming-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jbl/Desktop/jamming-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jbl/Desktop/jamming-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jbl/Desktop/jamming-master/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jbl/Desktop/jamming-master/src/components/app/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../searchbar/SearchBar';\nimport SearchResults from '../searchresults/SearchResults';\nimport Playlist from '../playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.search = _this.search.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      if (this.state.playlistTracks.every(function (plTrack) {\n        return plTrack.id !== track.id;\n      })) {\n        // @Reviewer is that the preferred way for building the new track list? I wasn't sure if it is allowed to modify playlistTracks directly,\n        // because it's part of the state.\n        var newPlaylistTracks = this.state.playlistTracks.concat(track);\n        this.setState({\n          playlistTracks: newPlaylistTracks\n        });\n      }\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var newPlaylistTracks = this.state.playlistTracks.filter(function (plTrack) {\n        return plTrack.id !== track.id;\n      });\n      this.setState({\n        playlistTracks: newPlaylistTracks\n      });\n    }\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(newName) {\n      this.setState({\n        playlistName: newName\n      });\n    }\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var _this2 = this;\n\n      var trackURIs = this.state.playlistTracks.map(function (track) {\n        return track.uri;\n      });\n\n      if (this.state.playlistName && trackURIs && trackURIs.length > 0) {\n        Spotify.savePlaylist(this.state.playlistName, trackURIs).then(function () {\n          // TODO may be show a beautiful notification?\n          console.log(\"new playlist with '\".concat(_this2.state.playlistName, \"' and \").concat(trackURIs.length, \" songs successful saved.\"));\n\n          _this2.setState({\n            playlistName: 'New Playlist',\n            playlistTracks: []\n          });\n        });\n      }\n    }\n  }, {\n    key: \"search\",\n    value: function search(searchTerm) {\n      var _this3 = this;\n\n      Spotify.search(searchTerm).then(function (tracks) {\n        return _this3.setState({\n          searchResults: tracks\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Ja\", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: this.state.searchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        tracks: this.state.playlistTracks,\n        title: this.state.playlistName,\n        onRemove: this.removeTrack,\n        onNameChange: this.updatePlaylistName,\n        onSave: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/jbl/Desktop/jamming-master/src/components/app/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","props","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","state","searchResults","playlistName","playlistTracks","track","every","plTrack","id","newPlaylistTracks","concat","setState","filter","newName","trackURIs","map","uri","length","then","console","log","searchTerm","tracks","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../searchbar/SearchBar';\nimport SearchResults from '../searchresults/SearchResults';\nimport Playlist from '../playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props); \n\t\tthis.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.updatePlaylistName = this.updatePlaylistName.bind(this);\n        this.savePlaylist = this.savePlaylist.bind(this);\n        this.search = this.search.bind(this);\n        this.state = {\n        \tsearchResults: [],\n            playlistName: \"New Playlist\",\n            playlistTracks: []};\n\t}\n\n    addTrack(track) {\n\t\tif (this.state.playlistTracks.every(plTrack => plTrack.id !== track.id)) {\n\t\t\t// @Reviewer is that the preferred way for building the new track list? I wasn't sure if it is allowed to modify playlistTracks directly,\n\t\t\t// because it's part of the state.\n\t\t\tlet newPlaylistTracks = this.state.playlistTracks.concat(track);\n\t\t\tthis.setState({playlistTracks: newPlaylistTracks});\n\t\t}\n\t}\n\n    removeTrack(track) {\n\t\tlet newPlaylistTracks = this.state.playlistTracks.filter(plTrack =>\n\t\t\tplTrack.id !== track.id);\n\t\tthis.setState({playlistTracks: newPlaylistTracks});\n\t}\n\n    updatePlaylistName(newName) {\n\t\tthis.setState({playlistName: newName});\n\t}\n\n    savePlaylist() {\n        let trackURIs = this.state.playlistTracks.map(track => track.uri);\n        if (this.state.playlistName && trackURIs && trackURIs.length > 0) {\n\t\t\tSpotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n\t\t\t\t// TODO may be show a beautiful notification?\n\t\t\t\tconsole.log(`new playlist with '${this.state.playlistName}' and ${trackURIs.length} songs successful saved.`);\n\t\t\t\tthis.setState({playlistName: 'New Playlist', playlistTracks: []});\n\t\t\t});\n\t\t}\n    }\n\n    search(searchTerm) {\n        Spotify.search(searchTerm).then(tracks =>\n            this.setState({searchResults: tracks}));\n\t}\n\n    render() {\n\t\treturn (\n\t\t  <div>\n\t\t\t  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n\t\t\t  <div className=\"App\">\n              <SearchBar onSearch={this.search}/>\n\t\t\t\t<div className=\"App-playlist\">\n\t\t\t\t  <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n\t\t\t\t  <Playlist tracks={this.state.playlistTracks} title={this.state.playlistName} onRemove={this.removeTrack}\n\t\t\t\t\t\t\tonNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}